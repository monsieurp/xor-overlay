# Copyright GOES HERE
# Distributed under the terms of the GNU General Public License v2
# See README.txt for usage notes.
EAPI=6

inherit multilib-build eutils pax-utils toolchain-enable git-r3

DESCRIPTION="The GNU Compiler Collection"
HOMEPAGE="https://gcc.gnu.org/"

LICENSE="GPL-3"
KEYWORDS="*"

SLOT="${PV}"

RESTRICT="strip"
FEATURES=${FEATURES/multilib-strict/}

IUSE="ada cxx d fortran go objc objc++ objc-gc"
IUSE="${IUSE} debug test"
IUSE="${IUSE} doc nls"
IUSE="${IUSE} hardened vanilla"
IUSE="${IUSE} multilib multiarch"
IUSE="${IUSE} +fortify libssp +link_now +pie sanitize ssp ssp_all stack_clash_protection vtv"
IUSE="${IUSE} altivec graphite lto openmp pch"
IUSE="${IUSE} +bootstrap bootstrap-lean bootstrap-profiled bootstrap-O3"

BDEPEND="
    sys-devel/binutils
    >=sys-devel/bison-1.875
    >=sys-devel/flex-2.5.4
    elibc_glibc? ( >=sys-libs/glibc-2.8 )
    elibc_musl? ( sys-libs/musl )
    nls? ( sys-devel/gettext[${MULTILIB_USEDEP}] )
	test? (
	        >=dev-util/dejagnu-1.4.4
	        >=sys-devel/autogen-5.5.4
    )
"

RDEPEND="
	objc-gc? ( >=dev-libs/boehm-gc-7.6[${MULTILIB_USEDEP}] )
	nls? ( sys-devel/gettext[${MULTILIB_USEDEP}] )
	>=dev-libs/gmp-4.3.2:0=
	graphite? ( >=dev-libs/isl-0.14:0= )
	virtual/libiconv[${MULTILIB_USEDEP}]
	>=dev-libs/mpfr-2.4.2:0=
	>=dev-libs/mpc-0.8.1:0=
	sys-libs/zlib[${MULTILIB_USEDEP}]
"

DEPEND="
    ${RDEPEND}
"

PDEPEND="
    >=sys-devel/gcc-config-1.5
    >=sys-devel/libtool-2.4.3
"

GCC_ARCHIVE_VER="10.1.0"
GCC_ARCHIVE="gcc-${GCC_ARCHIVE_VER}.tar.xz"
SRC_URI="ftp://gcc.gnu.org/pub/gcc/releases/gcc-${GCC_ARCHIVE_VER}/${GCC_ARCHIVE}"

# Ada Support:
GNAT32="gnat-gpl-2014-x86-linux-bin.tar.gz"
GNAT64="gnat-gpl-2017-x86_64-linux-bin.tar.gz"
SRC_URI="
        $SRC_URI
        ada? (
                amd64? ( mirror://funtoo/gcc/${GNAT64} )
                x86? ( mirror://funtoo/gcc/${GNAT32} )
        )
"

GENTOO_PATCHES_DIR="${FILESDIR}/gentoo-patches/${GCC_ARCHIVE_VER}/gentoo"

# We disable a few of these as we set our own 'extra options' for hardening.
# e.g. SSP, PIE, link_now, stack_clash_protection and so on.
GENTOO_PATCHES=(
        #01_all_default-fortify-source.patch
        #02_all_default-warn-format-security.patch
        #03_all_default-warn-trampolines.patch
        04_all_nossp-on-nostdlib.patch
        05_all_alpha-mieee-default.patch
        06_all_ia64_note.GNU-stack.patch
        07_all_i386_libgcc_note.GNU-stack.patch
        08_all_libiberty-asprintf.patch
        09_all_libiberty-pic.patch
        10_all_nopie-all-flags.patch
        11_all_sh-drop-sysroot-suffix.patch
        12_all_ia64-TEXTREL.patch
        13_all_disable-systemtap-switch.patch
        14_all_m68k-textrel-on-libgcc.patch
        15_all_respect-build-cxxflags.patch
        16_all_libgfortran-Werror.patch
        17_all_libgomp-Werror.patch
        18_all_libitm-Werror.patch
        19_all_libatomic-Werror.patch
        20_all_libbacktrace-Werror.patch
        21_all_libsanitizer-Werror.patch
        22_all_libstdcxx-no-vtv.patch
        23_all_disable-riscv32-ABIs.patch
        24_all_default_ssp-buffer-size.patch
        25_all_hppa-faster-synth_mult.patch
        26_all_libcpp-ar.patch
#   	27_all_EXTRA_OPTIONS-z-now.patch
#   	28_all_EXTRA_OPTIONS-fstack-clash-protection.patch
        29_all_fix-float-hang-PR95118.patch
        30_all_lto-intl-workaround-PR95194.patch
        31_all_ctor-range-PR95241.patch
        32_all_plugin-objdump.patch
        33_all_avx512-scalar-PR95528.patch
        34_all_cet-cross-x86.patch
        35_all_ICE-array-subscript-PR95508.patch
)

pkg_setup() {
	# we dont want to use the installed compiler's specs to build gcc
	unset GCC_SPECS
	unset LANGUAGES # Gentoo bug #265283
}

src_unpack() {
	unpack $GCC_ARCHIVE

	# GNAT ada support
	if use ada ; then
		if use amd64; then
			unpack $GNAT64 || die "ada setup failed"
		elif use x86; then
			unpack $GNAT32 || die "ada setup failed"
		else
			die "GNAT ada setup failed, only x86 and amd64 currently supported by this ebuild. Patches welcome!"
		fi
	fi
}

src_prepare() {

    # Export GCC branding
    # TODO: implement alpha, beta and git brandings possibly?
    if ! use hardened && ! use vanilla; then
        export GCC_BRANDING="Funtoo Linux {$PV}"
    elif use hardened; then
        export GCC_BRANDING="Funtoo Linux Hardened ${PV}"
    fi

    # Initial check
    if use vanilla && use hardened; then
        die "vanilla and hardened USE flags are incompatible - Disable one of them."
    fi

    # Only modify sources if USE="-vanilla"
    if ! use vanilla; then
        # Gentoo Linux patches
		if [ -n "$GENTOO_PATCHES_VER" ]; then
			einfo "Applying Gentoo patches ..."
			for my_patch in ${GENTOO_PATCHES[*]} ; do
				eapply_gentoo "${my_patch}"
			done
		fi

        # === HARDENING ===
        # TODO: write a blurb
        local gcc_hard_flags=""

        # Set -fstack-protector =all
        # -fstack-protector is initially set =-1 in GCC.
        # =0 TODO
        # =1 TODO
        # =2 -all
        # =3 -strong
        if use ssp && use hardened; then
            gcc_hard_flags+=" -DDEFAULT_FLAG_SSP=2"
        fi
        # Enable FORTIFY_SOURCE by default
	    use fortify && eapply_gentoo "$(set +f ; cd "${GENTOO_PATCHES_DIR}" && echo ??_all_default-fortify-source.patch )"
	    # Enable LINK_NOW by default
	    use link_now && eapply_gentoo "$(set +f ; cd "${GENTOO_PATCHES_DIR}" && echo ??_all_EXTRA_OPTIONS-z-now.patch )"
	    # Enable Stack Clash Protection by default
	    use stack_clash_protection && eapply_gentoo "$(set +f ; cd "${GENTOO_PATCHES_DIR}" && echo ??_all_EXTRA_OPTIONS-fstack-clash-protection.patch )"

	    # GCC stores it's CFLAGS in the Makefile - here we make those CFLAGS == ${gcc_hard_flags} so that they are applied in the build process.
        sed -e '/^ALL_CFLAGS/iHARD_CFLAGS = ' \
            -e 's|^ALL_CFLAGS = |ALL_CFLAGS = $(HARD_CFLAGS) |' \
            -i "${S}"/gcc/Makefile.in

        sed -e '/^ALL_CXXFLAGS/iHARD_CFLAGS = ' \
            -e 's|^ALL_CXXFLAGS = |ALL_CXXFLAGS = $(HARD_CFLAGS) |' \
            -i "${S}"/gcc/Makefile.in

        sed -i -e "/^HARD_CFLAGS = /s|=|= ${gcc_hard_flags} |" "${S}"/gcc/Makefile.in || die

        if use ada; then
            # PREPARE ADA TOOLCHAIN
        fi
    fi

    eapply_user
}

src_configure() {

    # gcc_conf is our array of opts to pass to ./configure
    local GCC_CONF

    # === BRANDING ===

    # === CHOST / CTARGET / CBUILD CONFIGURATION ===
    # Set the HOST!
    #
    # NOTE: Straight from the GCC install doc:
    # "GCC has code to correctly determine the correct value for target
    # for nearly all native systems. Therefore, we highly recommend you
    # not provide a configure target when configuring a native compiler."
    GCC_CONF+=( --host=${CHOST} )

    [[ -n ${CBUILD} ]] && GCC_CONF+=( --build=${CBUILD} )

    # === GENERAL CONFIGURATION ===

    # General configuration options

    GCC_CONF+=(
		--prefix="${PREFIX}"
		--bindir="${BINPATH}"
		--includedir="${INCLUDEPATH}"
		--datadir="${DATAPATH}"
		--mandir="${DATAPATH}/man"
		--infodir="${DATAPATH}/info"
		--with-gxx-include-dir="${STDCXX_INCDIR}"
	)

    GCC_CONF+=(
		--enable-obsolete
		--enable-secureplt
		--disable-libstdcxx-pch
		--disable-werror
		# NOTE: >3.4
		--disable-libunwind-exceptions
		# bundled zlib has issues building 32 bit
		--with-system-zlib
		# NOTE: >4.0
        # allow gcc to search for clock funcs in the main C lib.
        # if it can't find them, then tough cookies -- we aren't
        # going to link in -lrt to all C++ apps. Gentoo Linux bug #411681
		--enable-libstdcxx-time
		# TODO:
		--enable-threads=posix
		--enable-__cxa_atexit
		--enable-clocale=gnu
	)

	# Stick the python scripts in their own slotted directory (bug #279252)
	#
	#  --with-python-dir=DIR
	#  Specifies where to install the Python modules used for aot-compile. DIR
	#  should not include the prefix used in installation. For example, if the
	#  Python modules are to be installed in /usr/lib/python2.5/site-packages,
	#  then --with-python-dir=/lib/python2.5/site-packages should be passed.
	#
	GCC_CONF+=(
	    --with-python-dir=${DATAPATH/$PREFIX/}/python
	)

    if use nls ; then
		GCC_CONF+=( --enable-nls --without-included-gettext )
	else
		GCC_CONF+=( --disable-nls )
	fi

    # === CHECKING ===
	#   Use the default ("release") checking because upstream usually neglects
	#   to test "disabled" so it has a history of breaking. Gentoo Linux bug #317217
    GCC_CONF+=(
        --enable-checking="${GCC_CHECKS_LIST:-$(usex debug yes ${off})}"
    )

    # === BOOTSTRAP ===
    GCC_CONF+=" $(use_enable bootstrap) --enable-shared"

    # === LANGUAGE CONFIGURATION ===
    local GCC_LANG="c"
    if use ada; then
        GCC_LANG+=",ada"
    elif use cxx; then
        GCC_LANG+=",c++"
    elif use d; then
        GCC_LANG+=",d"
    elif use fortran
        GCC_LANG+=",fortran"
    elif use go; then
        GCC_LANG+=",go"
    elif use lto; then
        GCC_LANG+=",lto"
    elif use objc || if use objcxx; then
        GCC_LANG+=",objc"
        if use objc-gc; then
            GCC_CONF+=( --enable-objc-gc)
        fi
        if use objcxx; then
            GCC_LANG+=",obj-c++"
        fi
    fi

    # Pass GCC_LANG array from above to GCC_CONF
    GCC_CONF+=( --enable-languages=${GCC_LANG} )

    # === FEATURES CONFIGURATION ===
    #
    # ### Note [implicitly enabled flags] ###
    #
    # Usually configure-based packages handle explicit feature requests
    # like
    #     ./configure --enable-foo
    # as explicit request to check for suppor of 'foo' and bail out at
    # configure time.
    #
    # GCC does not follow this pattern an instead overrides autodetection
    # of the feature and enables it unconditionally.
    # See https://gcc.gnu.org/PR85663
    #
    # Thus safer way to enable/disable the feature is to rely on implicit
    # enabled-by-default state:
    #    econf $(usex foo '' --disable-foo)

	# Sanitizer
	GCC_CONF+=( $(usex sanitize '' ' --disable-libsanitizer') )

	# Enable building of default PIE code
	GCC_CONF+=( $(use_enable pie default-pie) )

	# Enable building of default stack-smash-protected code (defaults to -strong, unless USE=hardened in which case it is -all)
	GCC_CONF+=( $(use_enable ssp default-ssp) )

	GCC_CONF+=( $(use_enable libssp) )

	# Virtual table verification / C++ hardening
	if use vtv; then
		GCC_CONF+=" --enable-vtable-verify --enable-libvtv"
    else
		GCC_CONF+=" --disable-vtable-verify --disable-libvtv"
	fi

	if use graphite;
	    GCC_CONF+=" --disable-isl-version-check"
	fi

	# Enable lto
	GCC_CONF+=( $(use_enable lto) )

    # === ARCH CONFIGURATION

	GCC_CONF+=( $(use_enable multilib) )
	GCC_CONF+=( $(use_enable multiarch) )
}

